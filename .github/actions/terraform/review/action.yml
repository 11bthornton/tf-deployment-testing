name: Manual Approval
description: Composite action to create manual approval issue and wait for approval

inputs:
  secret:
    description: GitHub token (usually github.token)
    required: true
  approvers:
    description: Comma-separated list of approvers
    required: true
  minimum-approvals:
    description: Number of approvals needed
    required: true
  issue-title:
    description: Title of the approval issue
    required: true
  issue-body:
    description: Body content of the approval issue (ignored if issue-body-file-path provided)
    required: false
    default: ''
  issue-body-file-path:
    description: Path to a markdown file with issue body content
    required: false
    default: ''
  exclude-workflow-initiator-as-approver:
    description: Whether to exclude the workflow initiator from approvers
    required: false
    default: 'false'
  fail-on-denial:
    description: Whether the workflow should fail if approval is denied
    required: false
    default: 'true'
  additional-approved-words:
    description: Additional words to trigger approval
    required: false
    default: ''
  additional-denied-words:
    description: Additional words to trigger denial
    required: false
    default: ''
  plan-artifact-name:
    description: Name of the artifact containing the Terraform plan file
    required: false
    default: ''
  working-directory:
    description: Working directory where Terraform commands should be run
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      if: ${{ inputs.plan-artifact-name != '' }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Download plan artifact
      if: ${{ inputs.plan-artifact-name != '' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.plan-artifact-name }}
        path: ${{ inputs.working-directory }}

    - name: Extract plan content
      if: ${{ inputs.plan-artifact-name != '' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        PLAN_FILE=$(find . -name "*.tfplan" -type f | head -1)
        
        if [ -n "$PLAN_FILE" ]; then
          echo "Found plan file: $PLAN_FILE"
          terraform show -no-color "$PLAN_FILE" > terraform-plan-output.txt

          {
            echo "TERRAFORM_PLAN_CONTENT<<EOF"
            cat terraform-plan-output.txt
            echo "EOF"
          } >> $GITHUB_ENV
        else
          echo "No .tfplan file found in artifact"
          echo "TERRAFORM_PLAN_CONTENT=" >> $GITHUB_ENV
        fi

    - name: Prepare issue body
      shell: bash
      run: |
        OUTPUT_PATH=".github/approvals/_temp-combined-body.md"
        mkdir -p "$(dirname "$OUTPUT_PATH")"

        # Use direct input or file
        if [ -n "${{ inputs.issue-body }}" ]; then
          echo "${{ inputs.issue-body }}" > "$OUTPUT_PATH"
          echo "" >> "$OUTPUT_PATH"
        elif [ -n "${{ inputs.issue-body-file-path }}" ] && [ -f "${{ inputs.issue-body-file-path }}" ]; then
          cat "${{ inputs.issue-body-file-path }}" > "$OUTPUT_PATH"
          echo "" >> "$OUTPUT_PATH"
        fi

        # Append plan if present
        if [ -n "${TERRAFORM_PLAN_CONTENT:-}" ]; then
          {
            echo "## Terraform Plan"
            echo ""
            echo '```hcl'
            echo "$TERRAFORM_PLAN_CONTENT"
            echo '```'
          } >> "$OUTPUT_PATH"
        fi

        echo "ISSUE_BODY_FILE_PATH=$OUTPUT_PATH" >> $GITHUB_ENV

    - name: Manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ inputs.secret }}
        approvers: ${{ inputs.approvers }}
        minimum-approvals: ${{ inputs.minimum-approvals }}
        issue-title: ${{ inputs.issue-title }}
        issue-body-file-path: .github/approvals/_temp-combined-body.md
        exclude-workflow-initiator-as-approver: ${{ inputs.exclude-workflow-initiator-as-approver }}
        fail-on-denial: ${{ inputs.fail-on-denial }}
        additional-approved-words: ${{ inputs.additional-approved-words }}
        additional-denied-words: ${{ inputs.additional-denied-words }}
