name: Manual Approval
description: Composite action to create manual approval issue and wait for approval

inputs:
  secret:
    description: GitHub token (usually github.token)
    required: true
  approvers:
    description: Comma-separated list of approvers
    required: true
  minimum-approvals:
    description: Number of approvals needed
    required: true
  issue-title:
    description: Title of the approval issue
    required: true
  issue-body:
    description: Body content of the approval issue
    required: false
    default: ''
  exclude-workflow-initiator-as-approver:
    description: Whether to exclude the workflow initiator from approvers
    required: false
    default: 'false'
  fail-on-denial:
    description: Whether the workflow should fail if approval is denied
    required: false
    default: 'true'
  additional-approved-words:
    description: Additional words to trigger approval
    required: false
    default: ''
  additional-denied-words:
    description: Additional words to trigger denial
    required: false
    default: ''
  plan-artifact-name:
    description: Name of the artifact containing the Terraform plan file
    required: true
  working-directory:
    description: Working directory where Terraform commands should be run
    required: false
    default: '.'

runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      if: ${{ inputs.plan-artifact-name != '' }}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false
        terraform_version: 1.6.6

    - name: Download plan artifact
      if: ${{ inputs.plan-artifact-name != '' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.plan-artifact-name }}
        path: ${{ inputs.working-directory }}

    - name: Debug listing working directory
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Files in working directory:"
        ls -la

    - name: Extract plan content
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        PLAN_FILE=$(find . -name "tfplan.binary" -type f | head -1)
        echo "Plan file found: $PLAN_FILE"

        if [ -n "$PLAN_FILE" ]; then
          terraform show -no-color "$PLAN_FILE" > terraform-plan-output.txt
          {
            echo "TERRAFORM_PLAN_CONTENT<<EOF"
            cat terraform-plan-output.txt
            echo "EOF"
          } >> $GITHUB_ENV
          echo "Terraform plan content extracted successfully."
        else
          echo "No .tfplan file found."
          echo "TERRAFORM_PLAN_CONTENT=" >> $GITHUB_ENV
        fi

    - id: format_body
      name: Format issue body
      shell: bash
      run: |
        if [ -n "${TERRAFORM_PLAN_CONTENT:-}" ]; then
          BODY="## Terraform Plan\n\n\`\`\`hcl\n${TERRAFORM_PLAN_CONTENT}\n\`\`\`"
        else
          BODY="No Terraform plan available."
        fi

        echo "Final composed body:"
        echo -e "$BODY"

        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo -e "$BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Debug output from format_body step
      shell: bash
      run: |
        echo "Output body from format_body step:"
        echo "${{ steps.format_body.outputs.body }}"

    - name: Manual approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ inputs.secret }}
        approvers: ${{ inputs.approvers }}
        minimum-approvals: ${{ inputs.minimum-approvals }}
        issue-title: ${{ inputs.issue-title }}
        issue-body: ${{ steps.format_body.outputs.body }}
        exclude-workflow-initiator-as-approver: ${{ inputs.exclude-workflow-initiator-as-approver }}
        fail-on-denial: ${{ inputs.fail-on-denial }}
        additional-approved-words: ${{ inputs.additional-approved-words }}
        additional-denied-words: ${{ inputs.additional-denied-words }}
