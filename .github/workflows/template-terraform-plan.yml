name: Terraform Plan

on:
  workflow_call:
    inputs:
      working_directory:
        description: 'Directory containing Terraform configuration'
        required: true
        type: string
      terraform_version:
        description: 'Terraform version to use'
        required: false
        type: string
        default: '1.9.8'
      credentials_secret_name:
        description: 'Name of the Azure credentials secret'
        required: true
        type: string
        
    outputs:
      plan_output:
        description: 'The Terraform plan output'
        value: ${{ jobs.terraform-plan.outputs.plan_output }}
      fmt_outcome:
        description: 'The format check outcome'
        value: ${{ jobs.terraform-plan.outputs.fmt_outcome }}
      init_outcome:
        description: 'The init outcome'
        value: ${{ jobs.terraform-plan.outputs.init_outcome }}
      validate_outcome:
        description: 'The validation outcome'
        value: ${{ jobs.terraform-plan.outputs.validate_outcome }}
      plan_outcome:
        description: 'The plan outcome'
        value: ${{ jobs.terraform-plan.outputs.plan_outcome }}

    secrets:
      azure_credentials:
        description: 'Azure service principal credentials'
        required: true
      repo_token:
        description: 'GitHub token for PR comments'
        required: true

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    outputs:
      plan_output: ${{ steps.plan.outputs.plan_output }}
      fmt_outcome: ${{ steps.fmt.outcome }}
      init_outcome: ${{ steps.init.outcome }}
      validate_outcome: ${{ steps.validate.outcome }}
      plan_outcome: ${{ steps.plan.outcome }}
    
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform_version }}
        terraform_wrapper: false
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.azure_credentials }}
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      run: |
        # Run plan and capture output for display
        terraform plan -no-color -input=false | tee plan_output.txt
        
        # Debug: Check file contents
        echo "Plan output file size: $(wc -c < plan_output.txt) bytes"
        echo "First 200 chars of plan:"
        head -c 200 plan_output.txt
        echo -e "\n--- End preview ---"
        
        # Set the output for PR comments
        {
          echo 'plan_output<<EOF'
          cat plan_output.txt
          echo 'EOF'
        } >> $GITHUB_OUTPUT
        
        # Generate binary plan file for apply
        terraform plan -no-color -input=false -out=tfplan
        
        # Debug: Check if output was set
        echo "Output variable set, checking..."
        if [ -n "${GITHUB_OUTPUT}" ]; then
          echo "GITHUB_OUTPUT file exists and contains:"
          tail -20 "${GITHUB_OUTPUT}"
        fi
      continue-on-error: true
    
    - name: Add Plan to Job Summary
      if: always()
      run: |
        echo "## 🚀 Terraform Plan" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Working Directory:** \`${{ inputs.working_directory }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Terraform Version:** \`${{ inputs.terraform_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Plan Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Format Check:** ${{ steps.fmt.outcome == 'success' && '✅' || '❌' }} \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Initialization:** ${{ steps.init.outcome == 'success' && '✅' || '❌' }} \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation:** ${{ steps.validate.outcome == 'success' && '✅' || '❌' }} \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Plan Generation:** ${{ steps.plan.outcome == 'success' && '✅' || '❌' }} \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`terraform" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.plan.outputs.plan_output }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Plan generated at: $(date)*" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      if: steps.plan.outcome == 'success'
      with:
        name: terraform-plan-${{ github.run_id }}
        path: ${{ inputs.working_directory }}/tfplan
        retention-days: 5
    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
